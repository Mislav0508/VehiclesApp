[{"C:\\Users\\Mislav\\Desktop\\MonoProject\\application-project\\src\\index.js":"1","C:\\Users\\Mislav\\Desktop\\MonoProject\\application-project\\src\\App.js":"2","C:\\Users\\Mislav\\Desktop\\MonoProject\\application-project\\src\\common\\Store.jsx":"3","C:\\Users\\Mislav\\Desktop\\MonoProject\\application-project\\src\\components\\VehicleList.jsx":"4","C:\\Users\\Mislav\\Desktop\\MonoProject\\application-project\\src\\components\\VehicleCard.jsx":"5","C:\\Users\\Mislav\\Desktop\\MonoProject\\application-project\\src\\common\\Utils.jsx":"6","C:\\Users\\Mislav\\Desktop\\MonoProject\\application-project\\src\\common\\utils.jsx":"7","C:\\Users\\Mislav\\Desktop\\MonoProject\\application-project\\src\\components\\Details.jsx":"8"},{"size":357,"mtime":1611249740824,"results":"9","hashOfConfig":"10"},{"size":558,"mtime":1611035894978,"results":"11","hashOfConfig":"10"},{"size":1060,"mtime":1611287151826,"results":"12","hashOfConfig":"10"},{"size":5178,"mtime":1611289400491,"results":"13","hashOfConfig":"10"},{"size":569,"mtime":1611392445885,"results":"14","hashOfConfig":"10"},{"size":300,"mtime":1610852251263,"results":"15","hashOfConfig":"16"},{"size":304,"mtime":1611286882974,"results":"17","hashOfConfig":"10"},{"size":3184,"mtime":1611288619069,"results":"18","hashOfConfig":"10"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"4pdyf4",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"21"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"127bwpc",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"21"},"C:\\Users\\Mislav\\Desktop\\MonoProject\\application-project\\src\\index.js",[],["38","39"],"C:\\Users\\Mislav\\Desktop\\MonoProject\\application-project\\src\\App.js",[],"C:\\Users\\Mislav\\Desktop\\MonoProject\\application-project\\src\\common\\Store.jsx",["40"],"import React, {useContext, useState, useEffect} from \"react\"\r\nimport {useLocalObservable} from \"mobx-react\"\r\nimport data from \"../api/MOCK_DATA.json\"\r\nimport logos from \"../api/car-logos.json\"\r\nimport {arrayOfArrays} from '../common/utils'\r\nimport { toJS } from 'mobx';\r\n\r\n\r\nconst StoreContext = React.createContext()\r\n\r\nexport const StoreProvider = ({children}) => {\r\n  const store = useLocalObservable(() => ({\r\n    mockData: data,\r\n    carLogos: logos,\r\n    useVehicleList: () => {  \r\n      const [loading, setLoading] = useState(true)\r\n      const [data, setData] = useState([])\r\n    \r\n      const store = useStore() \r\n      const mockup = toJS(store.mockData)\r\n    \r\n      useEffect(() => {\r\n        setData(arrayOfArrays(mockup))\r\n        setLoading(false)\r\n      }, [])\r\n      return { loading, data }\r\n    },\r\n    editVehicleList: (new_data) => {\r\n      store.mockData = new_data\r\n    }\r\n  }))\r\n  return <StoreContext.Provider value={store}>\r\n    {children}\r\n  </StoreContext.Provider>\r\n}\r\n\r\nexport const useStore = () => useContext(StoreContext)\r\n\r\n\r\n","C:\\Users\\Mislav\\Desktop\\MonoProject\\application-project\\src\\components\\VehicleList.jsx",[],"C:\\Users\\Mislav\\Desktop\\MonoProject\\application-project\\src\\components\\VehicleCard.jsx",[],"C:\\Users\\Mislav\\Desktop\\MonoProject\\application-project\\src\\common\\Utils.jsx",["41","42","43"],"C:\\Users\\Mislav\\Desktop\\MonoProject\\application-project\\src\\common\\utils.jsx",[],"C:\\Users\\Mislav\\Desktop\\MonoProject\\application-project\\src\\components\\Details.jsx",["44"],"import React, {useState, useEffect} from 'react'\r\nimport {useObserver} from \"mobx-react\"\r\nimport {useParams, Link} from \"react-router-dom\"\r\nimport {useStore} from \"../common/Store\"\r\nimport { toJS } from 'mobx';\r\nimport stc from \"string-to-color\"\r\nimport {FaCar} from \"react-icons/fa\"\r\nimport Button from 'react-bootstrap/Button'\r\nimport \"./Details.css\"\r\n\r\nexport const Details = () => {\r\n  const store = useStore()\r\n  const SOURCELIST = toJS(store.mockData)\r\n\r\n  const [vehicle, setVehicle] = useState(\"default vehicle\")\r\n  const [editedSOURCELIST, setEDITEDSOURCELIST] = useState(SOURCELIST)\r\n\r\n  const[edit, setEdit] = useState(false)\r\n  const[inputTerm, setInputTerm] = useState(\"\")\r\n\r\n  const {id} = useParams()\r\n  const {loading} = store.useVehicleList()\r\n\r\n  const result = SOURCELIST.filter((vehicle) => {\r\n    if(vehicle.id === id){\r\n      return vehicle.id\r\n    }else{\r\n      return null\r\n    }\r\n  })\r\n  \r\n  // ---- COLORS ------\r\n  const currentColor = vehicle.color\r\n  const color = stc(currentColor)  \r\n\r\n  // ---- IMAGES  ------\r\n  const logos = toJS(store.carLogos)\r\n  const image = logos.filter((item) => {\r\n    if(vehicle.make === item.name){\r\n      return item.url\r\n    }\r\n    return \"\"\r\n  })\r\n\r\n  useEffect(() => {    \r\n    setVehicle(result[0])        \r\n  },[])\r\n\r\n  // ---- EDIT AND SAVE ------\r\n\r\n  const handleSave = () => {\r\n    setEdit(false)\r\n    if(inputTerm){\r\n      setInputTerm({...vehicle, color: inputTerm}) //new edited object\r\n      const index = SOURCELIST.findIndex((item) => item.id === id) //index based on useParams id\r\n      SOURCELIST[index] = {...SOURCELIST[index], color: inputTerm} //edited SOURCELIST\r\n      setEDITEDSOURCELIST(SOURCELIST)      \r\n    }\r\n    setInputTerm(\"\")\r\n    setVehicle({...vehicle, color: inputTerm})     \r\n  }\r\n\r\n  useEffect(()=> {\r\n    store.editVehicleList(editedSOURCELIST) // Invoking the function from the store \r\n  },[edit,editedSOURCELIST,store])\r\n\r\n  return useObserver(()=>(\r\n    (\r\n      <div className=\"main-section\">\r\n        {loading ? \"Loading\" : <div className=\"title-container\">\r\n          <h1>Details</h1>\r\n          <div className=\"underline\"></div><br/>\r\n          <img src={image[0].url} alt=\"vehicle img\"/>\r\n          <h2>{vehicle.make}</h2>\r\n          <h3>Model: {vehicle.model}</h3>\r\n          {edit ? \r\n          <input type=\"text\" \r\n          placeholder=\"Please type in your desired color\"\r\n          value={inputTerm}\r\n          onChange={e => setInputTerm(e.target.value)}\r\n          /> : <h3>Color: {vehicle.color}</h3> }\r\n          <FaCar style={{color: color}} className=\"car-icon\" />\r\n          <h3>ID: {vehicle.id}</h3>\r\n          <div className=\"details-btn-container\">\r\n            <Link to=\"/\">\r\n              <Button className=\"btn-details\" variant=\"outline-primary\">\r\n              Back to list\r\n              </Button>\r\n            </Link>\r\n            {!edit ? <Button className=\"btn-details\" onClick={()=>setEdit(true)}>Edit color</Button>\r\n            : \r\n            <Button className=\"btn-details\" variant=\"danger\"\r\n            onClick={handleSave}\r\n            >Save</Button>}            \r\n          </div>\r\n            \r\n        </div> }  \r\n      </div>\r\n    )\r\n  ))\r\n}\r\n",{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":25,"column":10,"nodeType":"51","endLine":25,"endColumn":12,"suggestions":"52"},{"ruleId":"53","severity":1,"message":"54","line":4,"column":10,"nodeType":"55","messageId":"56","endLine":4,"endColumn":14},{"ruleId":"53","severity":1,"message":"57","line":22,"column":10,"nodeType":"55","messageId":"56","endLine":22,"endColumn":14},{"ruleId":"49","severity":1,"message":"58","line":26,"column":5,"nodeType":"51","endLine":26,"endColumn":7,"suggestions":"59"},{"ruleId":"49","severity":1,"message":"60","line":47,"column":5,"nodeType":"51","endLine":47,"endColumn":7,"suggestions":"61"},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'mockup'. Either include it or remove the dependency array.","ArrayExpression",["64"],"no-unused-vars","'toJS' is defined but never used.","Identifier","unusedVar","'cars' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getVehiclesFromStore'. Either include it or remove the dependency array.",["65"],"React Hook useEffect has a missing dependency: 'result'. Either include it or remove the dependency array.",["66"],"no-global-assign","no-unsafe-negation",{"desc":"67","fix":"68"},{"desc":"69","fix":"70"},{"desc":"71","fix":"72"},"Update the dependencies array to be: [mockup]",{"range":"73","text":"74"},"Update the dependencies array to be: [getVehiclesFromStore]",{"range":"75","text":"76"},"Update the dependencies array to be: [result]",{"range":"77","text":"78"},[773,775],"[mockup]",[739,741],"[getVehiclesFromStore]",[1277,1279],"[result]"]